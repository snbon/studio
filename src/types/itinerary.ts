
// Import serverTimestamp if you plan to use it directly on write operations.
// Otherwise, Dates or ISO strings might be simpler for client-side state.
import { FieldValue } from 'firebase/firestore';

// Input data for generating an itinerary (remains the same)
export interface ItineraryInput {
  destination: string;
  travelDates: string; // Keep as string for simplicity in forms
  groupSize: number;
  activityPreferences: string;
  groupType: string; // e.g., 'family', 'friends', 'colleagues', 'solo', 'couple', 'other'
  tripLength: number; // in days
}

// Input data required for the AI generation flow
export interface GenerateItineraryApiInput extends ItineraryInput {}

// Expected output structure from the AI generation flow/API call
export interface GenerateItineraryApiOutput {
  itinerary: string;
}

// The full itinerary object as stored in Firestore and used in the app state
export interface Itinerary extends ItineraryInput, GenerateItineraryApiOutput {
  id: string; // Firestore document ID - always present when fetched
  userId: string; // ID of the user who created it
  title: string; // User-defined title for the itinerary
  createdAt: Date | FieldValue; // Use Date for app state, FieldValue for writing
  updatedAt: Date | FieldValue; // Use Date for app state, FieldValue for writing
  summary?: string; // Optional summary generated by AI
}

// Type used when creating/saving a new itinerary (ID is generated by Firestore)
export type NewItinerary = Omit<Itinerary, 'id' | 'createdAt' | 'updatedAt'> & {
  createdAt?: FieldValue; // Optional server timestamp on creation
  updatedAt?: FieldValue; // Optional server timestamp on creation
};

// Type for itinerary data coming from Firestore (Timestamps converted to Dates)
export interface FetchedItinerary extends Omit<Itinerary, 'createdAt' | 'updatedAt'> {
   createdAt: Date;
   updatedAt: Date;
}
