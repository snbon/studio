{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["\nimport { googleAI } from '@genkit-ai/googleai';\nimport { configureGenkit } from 'genkit';\n\n// Note: This configuration assumes you're using Google AI (Gemini) via the @genkit-ai/googleai plugin.\n// If a specific DeepSeek Genkit plugin exists and is installed, you would configure that instead.\n// As of now, there isn't a standard, widely adopted Genkit plugin specifically for DeepSeek.\n// Using Google AI is a common fallback or alternative.\n// Make sure your Google AI API key is set up correctly (e.g., in your environment variables or ~/.genkit/.env).\n\nconfigureGenkit({\n  plugins: [\n    googleAI({\n      // You might need to specify the model if the default isn't desired or suitable\n      // e.g., apiKey: process.env.GOOGLE_API_KEY, model: 'gemini-1.5-flash'\n      // If you have a specific DeepSeek API key, this setup WON'T use it directly.\n      // The prompts in the flows still *ask* the LLM (in this case, Gemini) to act like it's using DeepSeek,\n      // but the underlying API call goes to Google AI.\n    }),\n  ],\n  logLevel: 'debug', // Set to 'info' or 'warn' in production\n  enableTracingAndMetrics: true, // Optional: Enables OpenTelemetry tracing\n});\n\n// Re-export startFlowsServer for convenience if needed elsewhere\n// (Though usually `genkit start` handles this)\nexport { startFlowsServer } from '@genkit-ai/flow';\n// Export the configured 'ai' object for use in flows\nexport { ai } from 'genkit/ai';\n"],"names":[],"mappings":";AACA;AACA;;;AAEA,uGAAuG;AACvG,kGAAkG;AAClG,6FAA6F;AAC7F,uDAAuD;AACvD,gHAAgH;AAEhH,CAAA,GAAA,uIAAA,CAAA,kBAAe,AAAD,EAAE;IACd,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAMT;KACD;IACD,UAAU;IACV,yBAAyB;AAC3B","debugId":null}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-itinerary.ts"],"sourcesContent":["// 'use server';\n\n/**\n * @fileOverview Generates a travel itinerary based on user-provided details.\n *\n * - generateItinerary - A function that generates a travel itinerary.\n * - GenerateItineraryInput - The input type for the generateItinerary function.\n * - GenerateItineraryOutput - The return type for the generateItinerary function.\n */\n\n'use server';\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateItineraryInputSchema = z.object({\n  destination: z.string().describe('The destination for the trip.'),\n  travelDates: z.string().describe('The travel dates for the trip.'),\n  groupSize: z.number().describe('The number of people in the group.'),\n  activityPreferences: z.string().describe('The preferred activities for the trip.'),\n  groupType: z.string().describe('The type of group (e.g., family, friends, colleagues).'),\n  tripLength: z.number().describe('The length of the trip in days.'),\n});\nexport type GenerateItineraryInput = z.infer<typeof GenerateItineraryInputSchema>;\n\nconst GenerateItineraryOutputSchema = z.object({\n  itinerary: z.string().describe('A detailed and comprehensive travel itinerary.'),\n});\nexport type GenerateItineraryOutput = z.infer<typeof GenerateItineraryOutputSchema>;\n\nexport async function generateItinerary(input: GenerateItineraryInput): Promise<GenerateItineraryOutput> {\n  return generateItineraryFlow(input);\n}\n\nconst generateItineraryPrompt = ai.definePrompt({\n  name: 'generateItineraryPrompt',\n  input: {\n    schema: z.object({\n      destination: z.string().describe('The destination for the trip.'),\n      travelDates: z.string().describe('The travel dates for the trip.'),\n      groupSize: z.number().describe('The number of people in the group.'),\n      activityPreferences: z.string().describe('The preferred activities for the trip.'),\n      groupType: z.string().describe('The type of group (e.g., family, friends, colleagues).'),\n      tripLength: z.number().describe('The length of the trip in days.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      itinerary: z.string().describe('A detailed and comprehensive travel itinerary.'),\n    }),\n  },\n  prompt: `You are an expert travel planner.\n\n  Based on the following information, create a detailed and comprehensive travel itinerary.\n\n  Destination: {{{destination}}}\n  Travel Dates: {{{travelDates}}}\n  Group Size: {{{groupSize}}}\n  Activity Preferences: {{{activityPreferences}}}\n  Group Type: {{{groupType}}}\n  Trip Length: {{{tripLength}}} days\n\n  Please use the DeepSeek API to generate the itinerary.  The itinerary should include specific activities and recommendations for each day of the trip.  It should be well-organized and easy to follow.\n  `,\n});\n\nconst generateItineraryFlow = ai.defineFlow<\n  typeof GenerateItineraryInputSchema,\n  typeof GenerateItineraryOutputSchema\n>({\n  name: 'generateItineraryFlow',\n  inputSchema: GenerateItineraryInputSchema,\n  outputSchema: GenerateItineraryOutputSchema,\n}, async input => {\n  const {output} = await generateItineraryPrompt(input);\n  return output!;\n});"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB;;;;;;CAMC;;;;;AAID;AAAA;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,uCAAe,GAAf,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,4IAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;EAYT,CAAC;AACH;AAEA,MAAM,wBAAwB,4IAAA,CAAA,KAAE,CAAC,UAAU,CAGzC;IACA,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GAAG,OAAM;IACP,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;IAC/C,OAAO;AACT;;;IA9CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/itinerary/new/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/itinerary/new/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/itinerary/new/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","debugId":null}},
    {"offset": {"line": 429, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/itinerary/new/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/itinerary/new/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/itinerary/new/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8Q,GAC3S,4CACA","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}